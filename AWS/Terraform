Terraform is an open-source infrastructure as code (IaC) tool used for building and managing cloud and on-premises infrastructure.
Developed by HashiCorp, Terraform allows users to define and version infrastructure configurations in human-readable configuration files,
which can then be used to create and manage virtual machines, networks, and other resources on various cloud and on-premises platforms. 
Terraform supports a wide range of providers, including AWS, Azure, Google Cloud, and many others,
making it a popular choice for organizations seeking to standardize and automate their infrastructure management processes.

#######################################################################

terraform variables

Using variables in terraform configurations makes our deployment more dynamic.
A separate file with name variables.tf needs to be created in the working directory to store all variables fro our used in main.tf configuration file.

Terraform variables are values that can be used to customize the behavior of Terraform configurations throughout a workspace.
These values are stored in a variables.tf file and can be used to parameterize infrastructure as code. 
There are two types of variables in Terraform: local and input. 
Local variables are only accessible within the scope of the module or configuration they are declared in, while input variables are available throughout the entire workspace. 
Terraform variables can be set through command-line options, environment variables, or a variables.tf file.


#############################################################################

StateFile:

A Terraform state file is a JSON file that stores information about resources in your infrastructure, such as their IDs, 
attributes, and dependencies. It's created after running terraform apply and is usually named terraform.
tfstate and located in the same directory as Terraform. 

Terraform uses the state file to: 
Track resource state: Accurately account for the current state of your infrastructure 
Manage resource dependencies: Understand how resources depend on each other 
Plan and apply operations: Compare the desired state (your configuration) to the current state (the state file) 
Improve performance: Optimize performance for large infrastructures 
The state file contains information such as: 
Resource information: Resource IDs, attributes (like IP addresses and security group rules), and dependencies 
Metadata: Resource names, tags, and other configuration details 
Version: The Terraform version 
Serial: The serial 
Lineage: The lineage 
Outputs: The outputs 
Some recommend storing state in HCP Terraform to version, encrypt, and securely share it with your team. 
Terraform also uses a lock on the state file to prevent concurrent modifications that could lead to conflicts or data corruption.

##################################################################

Restoring statefile:

If the statefile is deleted or corrupted ,we can restore it using Terraform import command.

The terraform import command is used to import an existing infrastructure resource from a cloud or on-premises environment into a Terraform configuration. 
This command allows you to manage existing resources alongside newly created ones within your Terraform state.
The command syntax is terraform import <resource> <id>, where <resource> is the resource type and <id> is a unique identifier
of the resource. For example, terraform import aws_instance.web i-abc123 would import an AWS EC2 instance with the ID i-abc123 into your Terraform configuration.

     terraform import azurerm_subnet_network_security_group_association.association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/subnets/mysubnet1
      terraform import resource name resource id
######################################################################################

Terraform remote backend or remote statefile:

Terraform's remote backend and remote state are both ways to store Terraform state in a remote location, like a database or cloud object storage service.

When working with Terraform, a remote backend allows you to store and manage your infrastructure state remotely,
rather than on your local machine. This provides several benefits, including improved collaboration, version control, and disaster recovery.
A remote state file is a file stored in the remote backend, which contains the current state of your infrastructure. 
Popular remote backend options include AWS S3, Azure Blob Storage, and Google Cloud Storage. 
By using a remote backend, you can ensure that your infrastructure state is always synchronized and accessible from anywhere.

############################################################################################

How do I store Terraform state file remotely?

Here are the steps on how to store Terraform state file on Terraform cloud Remote:
Create a Terraform Cloud organization and workspace.
Create a configuration file that defines the resources you want to create.
Initialize Terraform.
Configure Terraform Cloud to store the state file.
Authentication with Terraform Cloud.

##############################################################################################
Modules:

Terraform modules are reusable packages of Terraform configuration that can encapsulate a specific combination of resources and dependencies.
They allow you to break down large infrastructure configurations into smaller, more manageable pieces, making it easier to maintain and reuse code.
Modules can be created and shared by the community, or created internally by your organization.
They can also be used to create consistent infrastructure across multiple environments, such as development, staging, and production. 
By using Terraform modules, you can speed up your infrastructure provisioning process and reduce errors.


##################################################################################################
Terraform state lock:

Terraform state locking is a safety mechanism that prevents data corruption and conflicts by ensuring 
that only one user or process can modify the Terraform state file at a time. 
It works by automatically locking the state for all operations that could write to it. 

In AWS S3 is used to store our statefile and DynamoDB is used for state lock

###################################################################################################
data sources in terraform

In Terraform, data sources are used to retrieve information from external sources, such as AWS, Azure, or a local file.
They allow you to store and retrieve data that's not easily captured by a Terraform resource. 
Common data sources include AWS EC2 instance ids, Azure storage account names, and local files.
To use a data source in Terraform, you declare it in your Terraform configuration file using the data keyword, followed by the type of data source and its arguments.

A data source is used to query information from external systems or existing resources and incorporate that information into our Terraform configuration.
It provides dynamic attributes that can be used to make our configurations context-aware and responsive to changes

########################################################################################
locals in terraform

In Terraform, locals are a way to define small, reusable blocks of code that can be used within a module or configuration.
They are not stored on disk, unlike variables, and are only available during the planning and applying phases of the Terraform configuration.
Locals can be used to simplify complex expressions, abstract away repetitive constructs, and make your configuration more readable.
They are defined using the local keyword and can be used to store values that are computed or derived from other values in your configuration

#############################################################################################
provisioners in terraform

Provisioners in Terraform are a way to execute code on a machine after it has been created or updated by Terraform. 
There are 3 types of provisioners: local-exec,Remote-exec and file. 
Local-exec provisioners allow the execution of arbitrary local code on the machine, 
while file provisioners enable the copying of files to the machine. 
Provisioners can be used to configure machines, install software, or perform other tasks.
They can be specified at the resource level, allowing for varying provisioning behavior per resource or group of resources.

##############################################################################################
file provisioner in terraform

A file provisioner in Terraform is a provisioner that copies files from the local file system to a remote server. 
It is used to manage the deployment of files to remote servers, such as configuration files, scripts, or other sensitive data. 
The file provisioner is typically used in combination with other provisioners, such as the script provisioner, to complete the deployment of a server.
There are two types of file provisioners: remote-exec and copy. 
The remote-exec provisioner runs a command on the remote server to copy the file, 
while the copy provisioner copies the file directly from the local file system to the remote server.

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  key_name      = "my-key"

  provisioner "file" {
    source      = "my-script.sh"
    destination = "/tmp/my-script.sh"

    connection {
      type     = "ssh"
      user     = "ubuntu"
      private_key = file("~/.ssh/my-key.pem")
      host     = self.public_ip
    }
  }
}


################################################################
 local-exec provisioner in terraform

The local-exec provisioner in Terraform is a provisioner that runs a command locally on a machine. 
The local-exec provisioner in Terraform is used to execute a command on the machine where Terraform is running. 
It is often employed for tasks such as invoking scripts, running shell commands,
or interacting with local systems during resource creation or destruction.
It allows you to execute arbitrary shell commands after a resource has been created. 
This is useful for tasks that require more control and customization than a provisioner like the remote-exec provisioner, which runs a command remotely on a machine.
The local-exec provisioner can be used to perform tasks such as copying files, or starting services.
You specify the command to run using the command argument.

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "local-exec" {
    command = "echo 'SubnetID ${self.subnetid} ' >> subnet_id.txt"
  }
}


###################################################################
remote-exec provisioner in terraform

The remote-exec provisioner in Terraform is a powerful tool that allows you to execute arbitrary commands on a remote resource after it has been created.
This can be useful for tasks such as configuring a newly created server, setting up a service, or installing software. 
The provisioner takes a command to run as its value, and Terraform will execute this command on the remote resource after creation. 
It also supports specifying a command timeout, and the option to run the command in a specific shell. 
This provisioner is commonly used in.tf files to automate post-creation tasks.

resource "aws_instance" "example" {
  ami           = "ami-12345678"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update -y",
      "sudo apt-get install -y nginx",
      "sudo systemctl start nginx"
    ]

    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = file("~/.ssh/id_rsa")
      host        = self.public_ip
    }
  }
}


#########################################################################
 workspace in terraform

In Terraform, a "workplace" refers to a shared environment for a specific project or organization. 
It allows multiple team members to collaborate on infrastructure resources and configurations. 
A workplace is essentially a container that holds all the Terraform configuration files, including state, variables, and outputs.
Within a workplace, you can manage resources, apply configurations, and version control your infrastructure changes. 
This enables teams to work together efficiently, maintaining a consistent and reproducible infrastructure setup.

to view all  available workspaces
terraform workspace list
crete new workspace
terraform workspace new <workspace_name>
switching between
terraform workspace select <workspace_name>
display current ws
terraform workspace show




###########################################################################
service principal in terraform

Here's the information you need about Service Principal in Terraform:

A service principal is a secure way to authenticate with Azure services using Terraform.
It's essentially an identity for your application or service that can be used to access Azure resources. 
In Terraform, you can use the azurerm_service_principal resource to create and manage service principals.
You can also use azurerm_client_config to configure and authenticate your Terraform workflow with a service principal. 
This provides a secure way to manage Azure resources without hardcoding your credentials.
#####################################################################################

Terraform Modules:
Terraform modules are reusable blocks of configuration that allow you to define and manage multiple infrastructure resources as a single unit. They enable you to break down complex infrastructure deployments into smaller, more manageable pieces, promoting modularity and reusability. Examples of Terraform modules include:

A module for creating a virtual private cloud (VPC) with subnets and security groups
A module for provisioning a database cluster with scaling and backup policies
A module for deploying a load balancer with auto-scaling and SSL termination
By using Terraform modules, you can speed up your infrastructure deployments, reduce errors, and improve maintainability.

What is a Terraform module? A Terraform module is a collection of standard configuration files in a dedicated directory. 
Terraform modules encapsulate groups of resources dedicated to one task,
reducing the amount of code you have to develop for similar infrastructure components.

################################################################################################
