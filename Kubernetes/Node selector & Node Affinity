Node selector:

A node selector in Kubernetes is a key-value pair that is used to schedule pods on specific nodes in a cluster. 
It allows you to label nodes with specific attributes and then use those labels to select which nodes a pod should run on.
This is useful for a variety of use cases, such as scheduling a pod on a node with a specific amount of memory or CPU, or 
scheduling a pod on a node with a specific operating system. Node selectors are defined as part of a pod's configuration and 
can be used in combination with other scheduling options to ensure that your pods are deployed to the right nodes.

Node selectors in Kubernetes allow you to control which nodes your pods are scheduled on by defining specific label-based constraints. 
By using node selectors, you can tell Kubernetes to run a pod only on nodes that match certain labels.

kubectl label nodes node1 hardware=gpu


apiVersion: v1
kind: Pod
metadata:
  name: frontend-pod
spec:
  containers:
  - name: frontend
    image: frontend-image
  nodeSelector:
    role: frontend


###########################################################################################################
Node affinity is a feature in Kubernetes that allows you to specify an affinity between a pod and a node. 
This feature is particularly useful when you want to deploy pods to specific nodes based on certain criteria.
Node affinity is similar to pod affinity, but it operates at the node level instead of the pod level. 
You can use node affinity to deploy pods to nodes with specific hardware or software configurations,
such as a certain amount of CPU or memory, or a specific device driver.

Node affinity in Kubernetes is a way to constrain which nodes a pod can be scheduled on, based on node labels.
It is similar to nodeSelector, but offers more flexibility and control. 
Node affinity allows you to specify rules about which nodes a pod can or cannot run on,
by matching the pod’s scheduling preferences with node labels.

There are two types of node affinity in Kubernetes:

1. Required During Scheduling, Ignored During Execution (requiredDuringSchedulingIgnoredDuringExecution):

Purpose: This is a hard requirement. The scheduler ensures that the pod is only scheduled on nodes that satisfy the affinity rules.
Behavior: If no suitable node is available, the pod won’t be scheduled

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: "disktype"
          operator: In
          values:
          - ssd

This example requires the pod to be scheduled only on nodes with the label disktype: ssd.

2. Preferred During Scheduling, Ignored During Execution (preferredDuringSchedulingIgnoredDuringExecution):

Purpose: This is a soft preference. The scheduler tries to place the pod on nodes that satisfy the affinity rules, but it's not mandatory.
Behavior: If no matching nodes are available, the scheduler will still schedule the pod on other available nodes.


affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: "zone"
            operator: In
            values:
            - east
This example expresses a preference to run the pod on nodes labeled with zone: east, but it can still be scheduled elsewhere if no such node is available.


apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "disktype"
            operator: In
            values:
            - ssd
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: "zone"
            operator: In
            values:
            - east
This pod will only be scheduled on nodes with disktype: ssd, and it prefers nodes with zone: east
