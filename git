git reflog 

The git reflog command is a powerful tool in Git that displays a record of all commits, including changes to branches and remote references.
It shows a log of all actions performed on the repository, including commits, branch switches, and push/pull operations. 
This log can be used to recover lost commits or branches, and to track changes to the repository over time. 
By running git reflog, you can see a list of commits with their corresponding hash IDs, along with a brief description of each action. 
This helps you navigate the commit history and recover from mistakes.

git stash

The stash command in Git is used to temporarily save changes made to the working directory, allowing you to switch branches or undo changes without committing them.
When you run git stash, Git saves the changes in a temporary area, and then reverts your working directory to its previous state. 
You can then switch branches, make changes, or undo previous changes. To retrieve the stashed changes, use git stash apply or git stash pop.
This feature is useful for managing changes when working on multiple tasks or when you need to quickly switch between branches.

cherrypick

If a commit is accidentally made to the wrong branch, users can switch to the correct branch and cherry-pick the commit
The cherry pick command in Git is a powerful tool that allows you to apply specific commits from one branch to another. 
It's particularly useful when you want to incorporate a single commit or a series of commits from one branch into another.
To use cherry pick, you run the command git cherry-pick <commit-hash>, where <commit-hash> is the hash of the commit you want to apply.
This command will attempt to apply the commit as if it were a new commit on the current branch, allowing you to cherry-pick individual commits from other branches.
